// Mise √† jour du backend/server.js
const express = require("express");
const mysql = require("mysql2");
const path = require("path");
const cors = require("cors");
const plagiarismRoutes = require("./routes/plagiarismRoutes");

require("dotenv").config({ path: "./docker/.env" });

// Import des routes
const authRoutes = require("./routes/authRoutes");
const dashboardRoutes = require("./routes/dashboardRoutes");
const profileRoutes = require("./routes/profileRoutes");
const dataRoutes = require("./routes/dataRoutes");
const aiRoutes = require("./routes/aiRoutes");
const studentRoutes = require("./routes/studentRoutes"); // Nouvelles routes pour les √©tudiants
const gradeRoutes = require("./routes/gradeRoutes"); // Nouvelles routes pour la gestion des notes

// Initialiser Express
const app = express();
const port = process.env.PORT || 5000;

// Middlewares
app.use(express.json());
app.use(cors({ origin: "http://localhost:8080" }));

// Servir les fichiers statiques
app.use(express.static(path.join(__dirname, "../frontend")));

app.use(
  "/profiles",
  express.static(path.join(__dirname, "../frontend/profiles"))
);

// Configuration des routes
app.use("/api/auth", authRoutes);
app.use("/api", dashboardRoutes);
app.use("/api/profile", profileRoutes);
app.use("/api/data", dataRoutes);
app.use("/api/ai", aiRoutes);
app.use("/api/plagiarism", plagiarismRoutes);
app.use("/api/data", studentRoutes); // Routes pour les √©tudiants
app.use("/api/data", gradeRoutes); // Routes pour la gestion des notes
app.use(
  "/submissions",
  express.static(path.join(__dirname, "../frontend/submissions"))
);

// V√©rification des variables d'environnement essentielles
if (
  !process.env.DB_HOST ||
  !process.env.DB_USER ||
  !process.env.DB_PASSWORD ||
  !process.env.DB_NAME ||
  !process.env.JWT_SECRET
) {
  console.error(
    "‚ùå Une ou plusieurs variables d'environnement sont manquantes !"
  );
  process.exit(1);
}

// Connexion √† MySQL (Docker)
const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});

db.connect((err) => {
  if (err) {
    console.error("‚ùå Erreur de connexion √† MySQL:", err.message);
    process.exit(1);
  } else {
    console.log("‚úÖ Connect√© √† MySQL !");
  }
});

// Route par d√©faut
app.get("/", (req, res) => {
  res.send("Backend en cours de d√©veloppement...");
});
app.get("/", (req, res) => {
  res.redirect("/Connexion.html");
});
// D√©marrage du serveur
app.listen(port, () => {
  console.log(`üöÄ Serveur backend d√©marr√© sur le port ${port}`);
});
// Cr√©er un fichier de d√©monstration si le dossier submissions est vide
const fs = require("fs");
const submissionsDir = path.join(__dirname, "../frontend/submissions");

// Cr√©er le dossier s'il n'existe pas
if (!fs.existsSync(submissionsDir)) {
  fs.mkdirSync(submissionsDir, { recursive: true });
  console.log("‚úÖ Dossier submissions cr√©√©");
}

// Cr√©er un fichier de d√©monstration si le dossier est vide
fs.readdir(submissionsDir, (err, files) => {
  if (err) {
    console.error("‚ùå Erreur lors de la lecture du dossier submissions:", err);
    return;
  }

  if (files.length === 0) {
    console.log(
      "‚ö†Ô∏è Dossier submissions vide, cr√©ation d'un fichier de d√©monstration..."
    );

    // Cr√©er un fichier texte simple pour tester
    fs.writeFile(
      path.join(submissionsDir, "demo-submission.txt"),
      "Ceci est un fichier de soumission de d√©monstration.\n\nIl est utilis√© pour tester la fonctionnalit√© de visualisation des soumissions.",
      (err) => {
        if (err) {
          console.error(
            "‚ùå Erreur lors de la cr√©ation du fichier de d√©monstration:",
            err
          );
        } else {
          console.log("‚úÖ Fichier de d√©monstration cr√©√© avec succ√®s");
        }
      }
    );
  }
});
